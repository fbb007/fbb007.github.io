<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>極.369</title>
  
  <subtitle>记住那关于光阴的教训 回头走天已暗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-28T07:11:41.855Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>無極</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java位运算</title>
    <link href="http://yoursite.com/2020/07/28/java%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/07/28/java%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-07-28T03:41:57.000Z</published>
    <updated>2020-07-28T07:11:41.855Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-1java位运算"><a href="#1-1java位运算" class="headerlink" title="1.1java位运算"></a>1.1java位运算</h4><p>java位运算应用于byte、short、int、long、char类型。java包含了七种位运算符。</p><a id="more"></a><table><thead><tr><th align="center">位运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="left">与(and)运算符，对两个整型操作数中对应位执行布尔代数，两个位都为1时输出1，否则为0。</td></tr><tr><td align="center">|</td><td align="left">或(or)运算符，对两个整型操作数中对应位执行布尔代数，两个位中只要有一个为1就输出1，否则为0。</td></tr><tr><td align="center">^</td><td align="left">异或(xor)运算符，对两个整型操作数中对应位执行布尔代数，两个位相同则为0，不相同则为1。</td></tr><tr><td align="center">~</td><td align="left">非(not)运算符，按位取反运算符，翻转操作数的每一位，即0变1，1变0。公式：-(value)-1</td></tr><tr><td align="center"><strong>&gt;&gt;</strong></td><td align="left">右移运算符，符合左侧数值按位右移符合右侧数值指定的位数，若为正数则高位补0，若为负数则高位补1。</td></tr><tr><td align="center">&lt;&lt;</td><td align="left">左移运算符，符合左侧数值按左移符合右侧数值指定的位数，并在低位处补0。</td></tr><tr><td align="center"><strong>&gt;&gt;&gt;</strong></td><td align="left">无符号右移运算符，符号左侧数值按位右移符号右侧指定的位数，无论正负高位补0。</td></tr></tbody></table><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">10</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1));</span><br><span class="line">System.out.println(Integer.toBinaryString(i2));</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><pre><code>101011111111111111111111111111110110</code></pre></blockquote><p>从以上可以看出，正数的源码和补码都一样。负数的二进制=源码—-&gt;反码–(+1)–&gt;补码。</p><h4 id="amp-运算符"><a href="#amp-运算符" class="headerlink" title="&amp;运算符"></a>&amp;运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &amp; i2));</span><br><span class="line">System.out.println(i1 &amp; i2);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>1000<br>        8</p></blockquote><p>分析：&amp;运算符，对应位都为1则为1，否则为0。</p><p>10的二进制  =        0000 1010<br>        -20的二进制 =       1110 1100<br>        10&amp;-20         =        0000 1000= 8 ，补码的最高位为1则为负数，最高位为0则为正数。正数的源码和补码都一样。</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="|运算符"></a>|运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 | i2));</span><br><span class="line">System.out.println(i1 | i2);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>11111111111111111111111111101110<br>        -18</p></blockquote><p>分析：|运算符，对应位只要有一个1则为1，否则为0。</p><p>10的二进制  =        0000 1010<br>        -20的二进制 =       1110 1100<br>        10|-20          =        1110 1110(补码)–(-1)–&gt;1110 1101(反码)—-&gt;0001 0010(源码)= -18(十进制)</p><h4 id="运算符-1"><a href="#运算符-1" class="headerlink" title="^运算符"></a>^运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 ^ i2));</span><br><span class="line">System.out.println(i1 ^ i2);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>11111111111111111111111111100110<br>        -26</p></blockquote><p>分析：^运算符，对应位相同则为0，否则为1。</p><p>10的二进制  =        0000 1010<br>        -20的二进制 =       1110 1100<br>        10 ^ -20        =        1110 0110(补码)–(-1)–&gt;1110 0101(反码)—-&gt;0001 1010(源码)= -26(十进制)</p><h4 id="运算符-2"><a href="#运算符-2" class="headerlink" title="~运算符"></a>~运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(~i1));</span><br><span class="line">System.out.println(Integer.toBinaryString(~i2));</span><br><span class="line">System.out.println(~i1);</span><br><span class="line">System.out.println(~i2);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>11111111111111111111111111110101<br>        10011<br>        -11<br>        19</p></blockquote><p>分析：~运算符</p><p>10的二进制  =        0000 1010<br>        取反                        1111 0101(补码)—(-1)-&gt;1111 0100(反码)—-&gt;0000 1011(源码)= -11(十进制)</p><p>-20的二进制 =       1110 1100<br>        取反                        0001 0011=19，正数的补码和源码一样。</p><p>关于 ~ 运算符公式：-(value)-1        </p><h4 id="gt-gt-运算符"><a href="#gt-gt-运算符" class="headerlink" title="&gt;&gt;运算符"></a>&gt;&gt;运算符</h4><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.toBinaryString(i2 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">System.out.println(i1 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">System.out.println(i2 &gt;&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>101<br>        11111111111111111111111111110110<br>        5<br>        -10</p></blockquote><p>分析：&gt;&gt;运算符，右移指定位数，正数则高位补0，负数则高位补1。</p><p>10的二进制  =        0000 1010<br>        10&gt;&gt;1 右移一位    0000  0101 = 5</p><p>-20的二进制 =       1110  1100<br>        -20&gt;&gt;1 右移一位   1111  0110(补码)—-&gt;0000 1010(源码)= -10</p><h4 id="lt-lt-运算符"><a href="#lt-lt-运算符" class="headerlink" title="&lt;&lt;运算符"></a>&lt;&lt;运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &lt;&lt; <span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.toBinaryString(i2 &lt;&lt; <span class="number">1</span>));</span><br><span class="line">System.out.println(i1 &lt;&lt; <span class="number">1</span>);</span><br><span class="line">System.out.println(i2 &lt;&lt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>测试结果</p><blockquote><p>10100<br>        11111111111111111111111111011000<br>        20<br>        -40</p></blockquote><p>分析：&lt;&lt;运算符，左移指定位数，低位补0。</p><p>10的二进制  =        0000 1010<br>        10&lt;&lt;1 左移一位     0001 0100 = 20</p><p>-20的二进制 =       1110  1100<br>        -20&lt;&lt;1 左移一位   1101 1000(补码)—-&gt;0010 1000(源码)= -40</p><h4 id="gt-gt-gt-运算符"><a href="#gt-gt-gt-运算符" class="headerlink" title="&gt;&gt;&gt;运算符"></a>&gt;&gt;&gt;运算符</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">20</span>;</span><br><span class="line">System.out.println(i1 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">System.out.println(i1 &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &gt;&gt;&gt; <span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.toBinaryString(i2 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">System.out.println(i2 &gt;&gt;&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>5<br>        5<br>        101<br>        1111111111111111111111111110110<br>        2147483638</p></blockquote><p>分析：&gt;&gt;&gt;运算符，右移指定位数，无论正负高位补0。</p><p>10的二进制  =        0000 1010<br>        10&gt;&gt;&gt;1 无符号右移一位 0000 0101 = 5</p><p>-20的二进制 =       1110  1100<br>        -20&gt;&gt;&gt;1  结果：1111111111111111111111111110110 int类型是32位数，这个结果只有31位，所以前面还有一个0省略了，全部应该为：0111 1111 1111 1111 1111 1111 1111 0110。这么长的一个二进制等于多少呢？<br>我们来算一算。int的最大值为 2^31^-1，最高位为0，所以为2^30^-1，然后1位上为0，表示没有，4位上为0，表示没有，所以这个二进制等于 2^30^-1-1-8</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="number">2</span> &lt;&lt; <span class="number">30</span>) - <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>2147483638</p></blockquote><p><strong>结论</strong>：</p><ol><li><p>负数的二进制转换： 源码—-&gt;反码–(+1)–&gt;补码       补码–(-1)–&gt;反码—-&gt;源码。</p></li><li><p>计算机运算时，使用的是补码。</p></li><li><p>正数使用 &gt;&gt;运算符和 &gt;&gt;&gt;运算符没有区别。&gt;&gt;&gt;运算符是针对对负数。</p></li><li><p>为什么没有&lt;&lt;&lt;运算符呢？因为&lt;&lt;运算符，无论正负低位补0。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-1java位运算&quot;&gt;&lt;a href=&quot;#1-1java位运算&quot; class=&quot;headerlink&quot; title=&quot;1.1java位运算&quot;&gt;&lt;/a&gt;1.1java位运算&lt;/h4&gt;&lt;p&gt;java位运算应用于byte、short、int、long、char类型。java包含了七种位运算符。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java位运算" scheme="http://yoursite.com/tags/java%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
</feed>
